Capitulo8 - RESUMO
Utilização de Arrays
Objetivos deste capítulo
- Diferenciar arrays unidimensionais de multidimensionais;
- Definir os aspectos fundamentais sobre a necessidade do uso de arrays;
- Demonstrar a praticidade da utilização de arrays;
- Apresentar as vantagens fornecidas pelo uso de arrays, em especial na manipulação de objetos;
- Fornecer conceitos que permitam ao leitor desenvolver aplicações mais consistentes e com código reduzido.

DEFINIÇÃO
	Em determinadas rotinas de programa torna-se necessário manipular diversas variáveis de um mesmo tipo de dado,
	por exemplo, manipular ao mesmo	tempo 100 nomes de pessoas. Em vez de realizar 'a declaração de 100 variáveis,
	é possível a declaração de apenas uma: variável definida como um vetor (array) de nomes.
		Os arrays são utilizados para armazenar um conjunto de itens que tenham	o mesmo tipo de dado primitivo ou
	a mesma classe, isto é, possibilitam armazenar diversos valores em uma única variável além de possibilitar 
	também o armazenamento de diversos objetos. Esses diversos itens são armazenados em forma de tabelas de fácil
	manipulação, sendo diferenciados e referenciados por um índice numérico. Talvez sem se dar conta disso, o 
	leitor tem usado um array desde o primeiro exemplo em Java, pois string args[] nada mais é do que um array de Strings.
		Os arrays estão presentes em praticamente todas as linguagens de programação e constituem-se num dos 
	aspectos mais importantes e facilitadores no desenvolvimento de aplicações. Em Java, os arrays são objetos 
	que permitem armazenar uma lista de itens relacionados.

ARRAYS UNIDIMENSIONAIS
	Os arrays unidimensionais, ou seja, arrays com uma dimensão, são os que possuem apenas um índice para acessar
	seu conteúdo. Eles são declarados da seguinte maneira:
	
	Tipo-de-dado nome-do-array[] = new tipo-do-dado [quantidade], em que:
	
	- Tipo-do-dado → pode ser qualquer tipo de variável primitiva ou classe;
	- Nome-do-array → um nome qualquer válido, da mesma forma que os nomes das variáveis;
	
	Exemplos:
		int N[]=new int[100]; cria um array de nome N que contém 100 elementos do tipo int e seu índice varia de 0 a 99.
		String mes[] = new String[12]; → cria um array de nome mes que contém 12 elementos do tipo string e seu índice varia de 0 a 11.
	
	Para atribuir o valor a um elemento do array, basta colocar o índice desejado dentro dos colchetes, como nos 
	formatos seguintes:
	
	N[0] = 100;
	N[52] = 38;
	mes[0] = "Janeiro";
	mes[11] = "Dezembro";
-------------------------------------------------------------------------------------------------------------------
		/* Demonstra a utilização de um array para armazenar um conjunto de argumentos do tipo inteiro, passado
		 * pelo usuario na linha de execução
		 * */


package Capitulo8_Utilizacao_De_Arrays;

public class Array_Unidimensional {

	public static void main(String[] args) {

		int i, total=0;
		//declara um array N de 10 elementos do tipo int
		int N[] = new int[10];
		
		if(args.length>0) {
			try {
				for(i=0; i<args.length; i++) {//armazena cada um dos argumentos no array
					N[i] = Integer.parseInt(args[i]);
					total += N[i];//acumula o somatorio dos elementos
				}
				System.out.println("Os numeros digitados na ordem inversa foram:");
				for(i=args.length-1; i>=0; i--) {
					System.out.print(N[i]+ " ");
					System.out.println("| "+i+" -> Indice responsavel que armazena o dado anterior");
				}
				
				System.out.println();
				System.out.println("O somatorio dos numeros, "+ total);
				System.out.println("A media entre eles , "+(total/args.length));
			}catch(NumberFormatException e) {
				System.out.println("Os argumentos devem ser numeros do tipo inteiro! ");
			}
		}else {
			System.out.println("Digite pelo menos um numero! ");
		}
	}
}
	
	Recebe Diverso numeros (o maximo 10) e armazena-os em um array de numeros inteiros.
	Observe que isso não é realizado diretamente, pois inicialmente os numeros sao armazenados no array args( um vetor
	de Strings).
	O laço for presente:
				
				for(i=0; i<args.length; i++) {//armazena cada um dos argumentos no array
					N[i] = Integer.parseInt(args[i]);
					total += N[i];//acumula o somatorio dos elementos
				}
	Se encarrega de converter os elementos do array, um a um.
	Uma vez armazenados no array N, os elementos são totalizados pela variavel total (total += N[i];).
	Existe tambem uma estrutura for para exibir na tela todos os elementos armazenados de forma inversa:
				
				for(i=args.length-1; i>=0; i--) {
					System.out.print(N[i]+ " ");
					System.out.println("| "+i+" -> Indice responsavel que armazena o dado anterior");
				}
	Ou seja, do ultimo ao primeiro.
	Observe tambem que o exemplo so funcionara se pelo menos um argumento for passado e se esse argumento for 
	do tipo inteiro
---------------------------------------------------------------------------------------------------------------	
	Os arrays podem ser criados e inicializados simultaneamente.
	Para isso, em vez de usar o operador new para criar um novo objeto array, devem-se colocar os elementos do
	array entre chaves e separados por virgula. Esses elementos dentro das chaves devem ser do mesmo tipo que a
	variavel que contem o array.
	Os arrays criados desta forma tem o mesmo tamanho do numero de elementos incluido entre chaves.
		SINTAXE:
			Tipo-de-dado nome-do-array[] = {valores separados por virgulas }
			
	
	Demonstra como usar essa declaração.
	O exemplo utiliza tambem a função String.valueOf() para manipular o conteudo de um array de caracteres.
------------------------------------------------------------------------------------------------------------------	
package Capitulo8_Utilizacao_De_Arrays;

public class Exemplo08_02_Array_Unidimensional_Inicialização_Direta {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String nomes="";
		char caracterArray[] = {'a','b','c','d','e','f','g'};//array de caracteres
		System.out.println("Mostrando o array: "+String.valueOf(caracterArray));
		System.out.println("Quantidade de elementos: "+caracterArray.length);
		System.out.println("Do 1 ao 3 caracter "+String.valueOf(caracterArray,0,3));
		System.out.println();
		
		//CRIANDO UM ARRAY DE STRINGS
		String StringArray[] = {"Aprendendo","a","linguagem","Java"};
		for(int i=0; i < StringArray.length; i++) {//armazena os nomes no array
			nomes = nomes + StringArray[i]+" ";
		}
		System.out.println("Mostrando o array: "+ nomes);
		System.out.println("Quantidade de elementos do array: "+StringArray.length);
		System.out.println("Mostrando o 1 elemento do array: "+ StringArray[0]);
		System.out.println("Mostrando o ultimo elemento do array: "+StringArray[StringArray.length-1]);
	}
}
------------------------------------------------------------------------------------------------------------------
	Os aspectos mais importantes do exemplo acima:
		- Arrays de caracteres -> utiliza-se para cada caracter declarado ''
		- Arrays de String -> utiliza ""
		- A funcao String.valueOf(): Pode ser usada para apresentar todos os elementos de um array de caracteres ou 
		  um trecho dele. (String.valueOf(caracterArray))
		- OBS: A funcao String.valueOf() não funciona para um conjunto de arrays do tipo String, apenas do tipo
		  String, apenas do tipo char(Conjunto de caracteres).

___________________________________________________________________________________________________________________

ARRAYS BIDIMENSIONAIS
		Os arrays bidimensionais ou arrays multidimensionais, como o próprio nome diz, permitem a criação de vetores
	com mais de um índice. Essa característica possibilita que os valores sejam armazenados na forma de matrizes
	de qualquer dimensão.
		A linguagem Java não suporta arrays bidimensionais como as outras linguagens (no formato linha, coluna, 
	por exemplo), entretanto é possível obter a	mesma funcionalidade criando um array de arrays. Os de uso mais
	comum são os que envolvem dois arrays, mas é possível criar arrays com quantas dimensões forem necessárias.
	Esses arrays devem ser declarados da seguinte maneira:
	
		Tipo-do-dado nome-do-array[] [] new tipo-do-dado [<indicel>] [<indice2>]
	
	O exemplo abaixo demonstra o uso de arrays bidimensionais para coletar 2 notas de 3 alunos 
	(um total de 6 notas). Uma vez armazenadas, o programa solicita ao usuário o número de um aluno para 
	mostrar suas notas e a média entre	elas.		 
-----------------------------------------------------------------------------------------------------------------
package Capitulo8_Utilizacao_De_Arrays;

import Capitulo5_Criacao_De_Metodos.Exemplo05_07_Classe_Externa_Diversos.Diversos;

public class Exemplo08_03_Arrays_Bidimensionais {

	public static void main(String[] args) {
		float notas[][] = new float[3][2];//declaração do array bidimensional
		int aluno = 0, nota;
		while(aluno<3) {
			nota = 0;
			while(nota<2) {
				System.out.println("Aluno "+(aluno+1)+", digite a "+(nota+1)+" Nota:");
				notas[aluno][nota] = Diversos.leNumeroFloat(0,10); //le a nota
				nota++;
			}
		aluno++;
		}
	System.out.println();
	//consultando as notas de um determinado aluno
	System.out.println("---------Consultando  notas de um aluno---------");
	System.out.println("Digite o Nº do aluno (1-3): ");
	aluno = Diversos.leNumeroInt(1, 3);//le o numero do aluno
	System.out.println("Aluno: "+aluno);
	System.out.println("Nota1: "+notas[aluno-1][0]+" Nota2: "+notas[aluno-1][1]);
	System.out.println("Media: "+((notas[aluno-1][0]+notas[aluno-1][1])/2));
	}
}
-----------------------------------------------------------------------------------------------------------------
Os aspectos mais importatantes deste exemplo:
	- São coletadas e armazenadas 2 notas de 3 alunos no array (notas[aluno][nota] = Diversos.leNumeroFloat(0,10);)
	  no formato de uma tabela:
	  		
	  		FORMA DE ARMAZENAMENTO NOS ARRAYS
	  _______________________________________________________________	
	  	Alunos/Notas |			0			|			 1			 |
	  0		Aluno1	 | Nota1 - indice[0][0] |	Nota2 - indice[0][1] |
	  1		Aluno2	 | Nota1 - indice[1][0] |	Nota2 - indice[1][1] |
	  2		Aluno3	 | Nota1 - indice[2][0] |	Nota2 - indice[2][1] |
	  _______________________________________________________________|
	  
	- (notas[aluno][nota] = Diversos.leNumeroFloat(0,10);) --> Contem o metodo leNumeroFloat() da classe Diversos 
	  elaborada no Capitulo 5, para que este exemplo rode é necessario que a classe Diversos esteja localizada no
	  mesmo diretorio.
	- Depois das notas terem sido coletadas, é solicitado ao usuario que informe o numero do aluno o qual se 
	  deseja consultar. Isso é realizado pelo metodo leNumeroInt() tambem presente na classe Diversos.
	  
PASSAGEM DE ARRAYS EM METODOS
	
	Os métodos já foram objeto de estudo em nosso livro. Na oportunidade, o leitor pode observar que é possível
	a criação de métodos que recebem valores, manipulam esses valores e retornam um resultado. Na passagem desses
	valores pode ser usado qualquer tipo de variável (int, float, double, string e outras). Da mesma forma, é
	possível também criar métodos com passagem e retorno de arrays. O funcionamento é basicamente o mesmo: 
	quando o método é invocado, um array qualquer é passado, esse array é manipulado internamente pelo método e 
	depois é retornado. Veja a sintaxe para um método que recebe e retorna um array:
		
		public static tipo-de-array [] nome-do-método (tipo-do-array nome-do-array [])
		
	O exemplo ABAIXO mostra um método que recebe um array do tipo inteiro, organiza seus elementos e retorna o
	array em ordem crescente. Esses elementos serão passados pelo usuário na linha de comando no momento da 
	execução do programa.
-----------------------------------------------------------------------------------------------------------------
package Capitulo8_Utilizacao_De_Arrays;

import Capitulo5_Criacao_De_Metodos.Exemplo05_07_Classe_Externa_Diversos.Diversos;

public class Exemplo08_04_Passsagem_De_Arrays_Em_Metodos {

	public static void main(String[] args) {		
		
		int N[] = new int[10];//cria um array de 10 elementos
		for(int i=0; i<10;i++) {//armazena os argumentos no array
			System.out.println("Digite o numero "+ (i+1));
			N[i] = Diversos.leNumeroInt(0,1000); // le um numero entre 0 e 1000
			if(N[i] == -1)//foi digitado um numero invalido
				i--;//retorna o indice;
		}
		
		for(int i=0; i<10;i++) {//ordem original do array
			System.out.println(N[i]);
		}
		
		System.out.println();
		
		N = ordenaArrayInt(N);//oderna o array
		System.out.println("Em ordem crescente: ");
		mostraArray(N);	
		
	}
	
	public static int[] ordenaArrayInt(int arr[]) {
		int x,y,aux;
		for(x=0; x < arr.length;x++) {
			for(y=0; y < arr.length; y++) {
				if(arr[x]<arr[y]) {
					aux = arr[y];
					arr[y] = arr[x];
					arr[x] = aux;
				}
			}
		}
		return arr;
	}
		
	public static void mostraArray(int arr[]) {
		for(int i=0; i < arr.length; i++) {//mostra o array ordenado
			System.out.println(arr[i]+ " ");
		}
	}
}
-----------------------------------------------------------------------------------------------------------------
Os aspectos mais importantes deste exemplo:
	- int N[] = new int[10]; -> Contem a declaração de um array(N) de elementos do tipo inteiro.
	- N[i] = Diversos.leNumeroInt(0,1000); --> Cada elemento do array N é armazenado em um indice diferente 
	controlado pela variavel i. Os numeros sao lidos pelo teclado por meio do metodo leNumeroInt da classe Diversos
	que deve estar armazenada na mesmo diretorio.
	- if(arr[x]<arr[y]) --> verifica se o numero digitado pelo usuario é valido. Se o metodo leNumeroInt retornar -1,
	 significa que o numero  é invalido e deve ser  digitado novamente.| i--; --> Responsavel por subtrair o indice
	 (do loop for) para que o usuario digite o numero novamente.
	- N = ordenaArrayInt(N); --> O array N recebe o resultado do metodo ordenaArrayInt definido entre as linhas:
		________________________________________________________________________________		
				public static int[] ordenaArrayInt(int arr[]) {							|	
					int x,y,aux;														|
					for(x=0; x < arr.length;x++) {										|
						for(y=0; y < arr.length; y++) {									|
							if(arr[x]<arr[y]) {											|
								aux = arr[y];											|
								arr[y] = arr[x];										|
								arr[x] = aux;											|
							}															|	
						}																|
					}																	|
					return arr;															|
				} 																		|
		________________________________________________________________________________|		
	
		Esse metodo recebera  os elementos do array N e retornara os elementos Ordenados(tambem na forma de array)
	
	- mostraArray(N); --> invoca esse metodo que se encarrega de imprimir os elementos do array N na tela.

ARRAYS DE OBJETOS

		Da mesma forma que variáveis primitivas, é possível criar um array para armazenamento de objetos. 
	Isso é muito importante na linguagem Java, pois permite realizar as mesmas operações com diversos objetos do
	mesmo tipo. Por exemplo, suponha que um formulário possua 30 caixas de texto. Se essas caixas forem 
	controladas por um array, o processo de limpeza de seus conteúdos torna-se extremamente simples, reduzindo 
	o tamanho do código se comparado ao tratamento individual das caixas de texto.
		
		O exemplo ABAIXO demonstra a utilização de um array de objetos, aproveitando-se da funcionalidade da classe 
	Veiculo do capítulo 7. 
	 Note que tanto na linha 8 como 
	na linha 15, se os objetos fossem tratados de forma individual, isto é, cada um com	nome diferente, seriam 
	necessárias 100 linhas de código, uma para cada objeto.